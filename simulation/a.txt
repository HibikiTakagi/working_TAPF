import heapq
from collections import defaultdict

class CBS:
    def __init__(self, graph, start_positions, goal_positions_list, shortest_path_lengths):
        self.graph = graph
        self.start_positions = start_positions
        self.goal_positions_list = goal_positions_list
        self.shortest_path_lengths = shortest_path_lengths
        self.num_agents = len(start_positions)
        self.current_goals = [goals[0] for goals in goal_positions_list]
        self.goal_indices = [0] * self.num_agents

    def find_paths(self):
        open_list = []
        root = {
            'cost': 0,
            'constraints': [],
            'paths': [self.a_star(agent) for agent in range(self.num_agents)]
        }
        heapq.heappush(open_list, (root['cost'], root))
        while open_list:
            _, node = heapq.heappop(open_list)
            conflict = self.get_first_conflict(node['paths'])
            if not conflict:
                if self.update_goals(node['paths']):
                    continue
                else:
                    return node['paths']
            constraints = self.create_constraints(conflict)
            for constraint in constraints:
                new_node = self.create_node(node, constraint)
                if new_node:
                    heapq.heappush(open_list, (new_node['cost'], new_node))
        return None

    def a_star(self, agent, constraints=None):
        start = self.start_positions[agent]
        goal = self.current_goals[agent]
        open_list = [(0, start)]
        came_from = {start: None}
        g_score = {start: 0}
        f_score = {start: self.heuristic(start, goal)}
        while open_list:
            _, current = heapq.heappop(open_list)
            if current == goal:
                return self.reconstruct_path(came_from, current)
            for neighbor in self.graph[current]:
                if self.is_constrained(current, neighbor, g_score[current] + 1, constraints, agent):
                    continue
                tentative_g_score = g_score[current] + 1
                if neighbor not in g_score or tentative_g_score < g_score[neighbor]:
                    came_from[neighbor] = current
                    g_score[neighbor] = tentative_g_score
                    f_score[neighbor] = tentative_g_score + self.heuristic(neighbor, goal)
                    heapq.heappush(open_list, (f_score[neighbor], neighbor))
        return None

    def heuristic(self, a, b):
        return self.shortest_path_lengths.get((a, b), float('inf'))

    def reconstruct_path(self, came_from, current):
        path = []
        while current is not None:
            path.append(current)
            current = came_from[current]
        return path[::-1]

    def get_first_conflict(self, paths):
        max_len = max(len(path) for path in paths)
        for t in range(max_len):
            positions = defaultdict(list)
            for agent, path in enumerate(paths):
                if t < len(path):
                    pos = path[t]
                else:
                    pos = path[-1]
                positions[pos].append(agent)
                if len(positions[pos]) > 1:
                    return {'time': t, 'pos': pos, 'agents': positions[pos]}
        return None

    def create_constraints(self, conflict):
        constraints = []
        for agent in conflict['agents']:
            constraints.append({
                'agent': agent,
                'pos': conflict['pos'],
                'time': conflict['time']
            })
        return constraints

    def create_node(self, node, constraint):
        new_constraints = node['constraints'] + [constraint]
        new_paths = []
        for agent in range(self.num_agents):
            new_path = self.a_star(agent, new_constraints)
            if not new_path:
                return None
            new_paths.append(new_path)
        return {
            'cost': sum(len(path) for path in new_paths),
            'constraints': new_constraints,
            'paths': new_paths
        }

    def is_constrained(self, current, next_pos, time, constraints, agent):
        if constraints is None:
            return False
        for constraint in constraints:
            if constraint['pos'] == next_pos and constraint['time'] == time and constraint['agent'] == agent:
                return True
        return False

    def update_goals(self, paths):
        updated = False
        for agent, path in enumerate(paths):
            if path[-1] == self.current_goals[agent]:
                self.goal_indices[agent] += 1
                if self.goal_indices[agent] < len(self.goal_positions_list[agent]):
                    self.current_goals[agent] = self.goal_positions_list[agent][self.goal_indices[agent]]
                    self.start_positions[agent] = path[-1]
                    updated = True
        return updated

# Example usage:
graph = {
    0: [1, 2],
    1: [0, 3],
    2: [0, 3],
    3: [1, 2, 4],
    4: [3]
}

# Precomputed shortest path lengths (for heuristic)
shortest_path_lengths = {
    (0, 1): 1, (0, 2): 1, (0, 3): 2, (0, 4): 3,
    (1, 0): 1, (1, 2): 2, (1, 3): 1, (1, 4): 2,
    (2, 0): 1, (2, 1): 2, (2, 3): 1, (2, 4): 2,
    (3, 0): 2, (3, 1): 1, (3, 2): 1, (3, 4): 1,
    (4, 0): 3, (4, 1): 2, (4, 2): 2, (4, 3): 1
}

start_positions = [0, 4]
goal_positions_list = [[4, 2], [0, 3]]

cbs = CBS(graph, start_positions, goal_positions_list, shortest_path_lengths)
paths = cbs.find_paths()
print(paths)